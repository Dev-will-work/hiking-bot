import logging
import random
import re
from itertools import tee

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Updater, MessageHandler, Filters, ConversationHandler,
)

from config import TELEGRAM_BOT_TOKEN

FIRST, SECOND, THIRD = range(3)

results = {'sleep': """–õ–æ–≤–µ—Ü —Å–Ω–æ–≤ –≤ –ø—Ä–æ–ª—ë—Ç–µ üò¥
–†–µ–±—è—Ç, —É –º–µ–Ω—è –¥–æ –ø–æ—Ö–æ–¥–∞ –≤–µ—Å—å —Ä–µ–∂–∏–º —Å–ª–æ–º–∞–ª—Å—è –∏ —Å–ø–∞–ª—å–Ω–∏–∫–∏ —Å —Å–æ–±–æ–π, –ø—Ä–∏–ª—è–≥—É –Ω–∞ –º–∏–Ω—É—Ç–æ–∫ 10
 –∏ –ø–æ–π–¥—É —Ç–∞—Å–∫–∞—Ç—å –¥—Ä–æ–≤–∞ –Ω–∞ —Å–≤–µ–∂—É—é –≥–æ–ª–æ–≤—É ü§™
*–ù–µ–º–Ω–æ–≥–∏–º –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –æ–±–µ–¥–∞*
–¢–∞–∫, —É–∂–µ —Ç–µ–º–Ω–µ–µ—Ç, –ø—Ä–∏–∫–æ—Ä–Ω—É-–∫–∞ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ –∏ –ø–æ—Ç–æ–º —Å—Ä–∞–∑—É –≤—Å–µ —Ä–µ—à–∏–º!
–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, –∞, –Ω–æ—á—å, –∞ —á—Ç–æ –∫–∞–∫ —Ç–µ–º–Ω–æ üòêüåö""",
           'fire': """–ö–æ—Å—Ç—Ä–æ–≤–æ–π –Ω–∞ –≤–∑–≤–æ–¥–µ üî•
–û—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π ¬´–ß–µ–π –∫—Ä–æ—Å—Å–æ–≤–æ–∫ —Ç—É—Ç –∑–∞–≥–æ—Ä–µ–ª—Å—è?¬ª –∏ ¬´–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ö–≤–æ—Ä–æ—Å—Ç–∞, –º–∏–ª–æ—Ä–¥¬ª, –∏ –∫–æ–Ω–µ—á–Ω–æ
 ¬´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã –∫–æ—Å—Ç–µ—Ä —Å–ª–æ–∂–∏–ª–∏, –¥–∞–π—Ç–µ –ø–æ–∫–∞–∂—É –∫–∞–∫ –Ω–∞–¥–æ.. *****, –¥–µ—Ä–∂–∏—Ç–µ –∫–æ—Ç—ë–ª —Å–∫–æ—Ä–µ–µ!!¬ª ü§Ø""",
           'photo': """–§–æ—Ç–æ–≥—Ä–∞—Ñ –≤ —Ä–∞–±–æ—Ç–µ üì∏üòé
–ù–∞–≤–µ—Ä–Ω—è–∫–∞ –≤—ã –ø–æ –ø—Ä–∏–µ–∑–¥–µ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è –º–µ—à–∞—é—â–∏—Ö –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –¥–µ–ª–æ–º –ª–µ–º—É—Ä–æ–≤ –Ω–∞–π–¥—ë—Ç–µ,
 –∞ –≤–ø—Ä–æ—á–µ–º, —ç—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å—á–∞—Å—Ç—å—è –¥–ª—è –≤–∞—Å –≤ –ø–æ—Ö–æ–¥–µ ü§©
–ó–∞—Ç–æ –≤—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–±–µ—Ä—ë—Ç–µ üîÆ""",
           'car': """–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –§–æ—Ä–¥–µ
–ê –º–æ–∂–µ—Ç –∏ –Ω–µ –Ω–∞ –§–æ—Ä–¥–µ, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –≤–æ–¥–∏—Ç–µ–ª—å.. ü§î
–ù–æ —Ç–æ—á–Ω–æ —Ç–æ, —á—Ç–æ –≤–æ–¥—ã —Ç–µ–ø–µ—Ä—å –≤—Å–µ–º —Ö–≤–∞—Ç–∏—Ç –≤ –ø–æ—Ö–æ–¥–µ, –∏ –≤–µ—â–µ–π –≤—ã –æ–¥–∏–Ω –∫–∞–∫ 10 —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–≤–µ–∑–µ—Ç–µ,
 –Ω—É –∏ –∑–∞–æ–¥–Ω–æ –ª—é–¥–µ–π –ø–æ–±–ª–∏–∂–µ –∫ –º–µ—Å—Ç—É –ø–æ—Ö–æ–¥–∞ –¥–æ–≤–µ–∑—ë—Ç–µ üß≥üåä""",
           'food': """–û–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä –≤—Ä–æ–¥–µ üë®‚Äçüç≥
–≠—Ç–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –≤ –ø–æ—Ö–æ–¥–µ –ø–∞—Å—Ç—É –ë–æ–ª–æ–Ω—å–µ–∑–µ –Ω–∏–∫—Ç–æ –Ω–µ –¥–∞—Å—Ç, –º–∞–∫—Å–∏–º—É–º —Ç–æ–º–∞—Ç–Ω—É—é –ø–∞—Å—Ç—É —Å–∞–º–∏ —Ç—É–¥–∞ –≤–æ–∑—å–º–µ—Ç–µ..
–ù–æ —á—Ç–æ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ –≤—ã –ø–æ–ª–µ–∑–Ω—É—é –∏ –≤–∫—É—Å–Ω—É—é –µ–¥—É –∏–∑ –º–∏–Ω–∏–º—É–º–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞—ë—Ç–µ üòãüíØ
–ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –≤—Å–µ–º –æ—Å—Ç–∞–ª–æ—Å—å, –Ω—É –∏ –≤—ã —Å–∞–º–∏ –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å —Å –µ–¥–æ–π –≤ –ø—Ä–æ–ª—ë—Ç–µ üòä""",
           'forest': """–î–∏—Ç—è –ª–µ—Å–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–µ üå≤
–†–µ–±—è—Ç–∞, –∫–∞–∫ –∂–µ —Ç—É—Ç –∫–ª–∞—Å—Å–Ω–æ –≤—Å—ë-—Ç–∞–∫–∏, —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤–µ—Ä–Ω—É—Å—å.. ‚è≥
*–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤, –∫–æ–≥–¥–∞ –≤—Å–µ —É—à–ª–∏ –∑–∞ –¥—Ä–æ–≤–∞–º–∏ –∏ –±—Ä–µ–≤–Ω–∞–º–∏*
–ö–æ—Å—Ç—Ä–æ–≤–æ–π, –∞ –≥–¥–µ –≤—Å–µ? –ê, –ø–æ–Ω—è—Ç–Ω–æ üôÇ
–ø–æ–π–¥—É –∑–∞ –Ω–∏–º–∏ —Å—Ö–æ–∂—É..
*–ü—Ä–∏–º–µ—Ä–Ω–æ –≤ –∫–æ–Ω—Ü–µ –ø–æ—Ö–æ–¥–∞*
–ê, —Ç–∞–∫ –≤—ã —É–∂–µ —Ç—É—Ç, –ß–¢–û, –∫–∞–∫ —É–∂–µ –≤—Å—ë?? üòµüí¢""",
           'friends': """–ò—Å–∫–∞—Ç–µ–ª—å –¥—Ä—É–∑–µ–π –≤ —Å–æ–±—Ä–∞–≤—à–µ–º—Å—è –Ω–∞—Ä–æ–¥–µ ü§ó
–ü–æ–∫–∞ –≤—ã –∏–¥–µ—Ç–µ –¥–æ –æ—Ç—Ä—è–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Å –æ—Ç—Ä—è–¥–æ–º –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –∫ –ø–∞—Ä–µ –ª—é–¥–µ–π, –∞ –æ—Ç –Ω–∏—Ö –∫ –µ—â–µ –ø–∞—Ä–µ –ª—é–¥–µ–π,
 –∏ –≤—Å—ë, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫ –Ω–æ —Ç–µ–ø–µ—Ä—å –≤—ã –≤ –ö–æ—Å—Ç—Ä–æ–º–µ üë∫
–ê —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø—É—Ç–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ –∏ –æ–±—Ä–∞—Ç–Ω–æ —Å –¥—Ä—É–∑—å—è–º–∏ –≤—ã —Ç–æ–∂–µ –¥–æ—Ä–æ–≥—É –Ω–∞–π–¥—ë—Ç–µ üòèüö∑""",
           'clothes': """–û–¥–µ—Ç—ã–π/–û–¥–µ—Ç–∞—è –ø–æ –ø–æ–≥–æ–¥–µ ‚õÖ
–û–Ω–æ –∫–æ–Ω–µ—á–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –≤ –ø–æ—Ö–æ–¥—ã –º—ã –≤–µ—Å–Ω–æ–π –∏ –æ—Å–µ–Ω—å—é —Ö–æ–¥–∏–º, 
–Ω–æ —Å —Ç–∞–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–¥–µ–∂–¥—ã –≤–µ—Ä–æ—è—Ç–Ω–æ –≤—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –∏–¥—ë—Ç–µ –∏ –±—ã—Å—Ç—Ä–æ —É—Å—Ç–∞—ë—Ç–µ ü•± 
–ê –µ—Å–ª–∏ –æ—á–µ–Ω—å –ø–æ–≤–µ–∑–µ—Ç, —Ç–æ –≤–∞–º —Å –∫–æ—Å—Ç—é–º–æ–º –¥–∞–∂–µ –≤—ã–ø–∞–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫—É–ø–∞—Ç—å—Å—è –≤ –±–æ–ª–æ—Ç–µ üí¶ü¶∫""",
           'guitar': """–ì–∏—Ç–∞—Ä–∏—Å—Ç –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ üé∂
–Ø –Ω–∞ —Å–ø–µ–≤–∫—É, –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å –∏–ª–∏ –ø–æ–ª—á–∞—Å–∞ –±–µ–∑ –º–µ–Ω—è –ø—Ä–æ–∂–∏–≤—ë—Ç–µ üòè
–¢–∞–∫, –≤—Å–µ –≤–º–µ—Å—Ç–µ —Å—Ü–µ–ø–ª—è–µ–º—Å—è –≤ –∫—Ä—É–≥, 5 —à–∞–≥–æ–≤ –Ω–∞–∑–∞–¥, –∏ –µ—â—ë —à–∞–≥...
*1,5 –∫–º —Å–ø—É—Å—Ç—è*
–ù–∏–∫—Ç–æ –º–µ–Ω—è –Ω–µ —Å–ª—ã—à–∏—Ç? –û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º üî•üéº""",
           'axe': """–õ–µ—Å–æ—Ä—É–± –Ω–∞ –æ—Ö–æ—Ç–µ ü§†ü™ì
–¢–∞–∫, –∑–¥–µ—Å—å –∑–Ω–∞—á–∏—Ç –±—É–¥–µ–º —Å–∏–¥–µ—Ç—å, –ø–æ–Ω—è—Ç–æ, —Å–µ–π—á–∞—Å –ø—Ä–∏–¥—É üö∂‚Äç‚ôÇÔ∏è
–®—Ç–æ—à, 16 –±—Ä–µ–≤–µ–Ω –Ω–∞–º –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∏—Ç—å üòº
–ò –µ—â–µ 32 –¥–µ—Ä–µ–≤–∞ –ø–æ—Å—Ä—É–±–∞–ª–∏ —á—Ç–æ–± –¥—Ä—É–≥–∏–º —Ö–≤–∞—Ç–∏–ª–æ üòâ
–¢–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—É—Ö–∏–µ –±—Ä–∞–ª–∏, —Å–∞–º–æ —Å–æ–±–æ–π, —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –º—ã –±—É–¥–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —É—Ç—Ä–æ üíß‚ò†"""}

test_message_bank = iter(["–ò—Ç–∞–∫, –Ω–∞—á–Ω—ë–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç:\n–¢—ã –ª—é–±–∏—à—å —Ö–æ–¥–∏—Ç—å –∏ –≥—É–ª—è—Ç—å?",
                          "–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –ª—é–¥—è–º –∏ –æ–±—â–µ–Ω–∏—é —Å –Ω–∏–º–∏, –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–∞–∫–æ–µ?",
                          "–°–∏–ª–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, —ç—Ç–æ –ø—Ä–æ —Ç–µ–±—è?",
                          "–ê —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∫–∞–∫ –¥–µ–ª–∞?"])
test_message_bank, shadow_message_bank = tee(test_message_bank)

your_destiny = ""

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)
bot = Bot(token=TELEGRAM_BOT_TOKEN)


def calculate_result() -> str:
    mapping = {'----': 'sleep',
               '---+': 'photo',
               '--+-': 'clothes',
               '--++': 'guitar',
               '-+--': 'friends',
               '-+-+': 'food',
               '-++-': 'car',
               '-+++': 'car',
               '+---': 'forest',
               '+--+': 'photo',
               '+-+-': 'clothes',
               '+-++': 'guitar',
               '++--': 'friends',
               '++-+': 'fire',
               '+++-': 'car',
               '++++': 'axe'
               }
    return mapping[your_destiny]


def start_command_handler(update: Update, _: CallbackContext) -> int:
    """ Send a message when the command /start is issued."""
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä", user.first_name)
    keyboard = [
        [
            InlineKeyboardButton("–ê –∫—Ç–æ —è?", callback_data="answer question"),
            InlineKeyboardButton("–Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é –∫—Ç–æ —è üòé", callback_data="answer exact")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(f'''–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üèï
–ù–∞–≤–µ—Ä–Ω—è–∫–∞ —Ç—ã —Å–∫—É—á–∞–µ—à—å –ø–æ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º —Å–æ–±—ã—Ç–∏—è–º –æ—Å–µ–Ω–Ω–µ–≥–æ –ø–æ—Ö–æ–¥–∞.. üëÄ
–ù–æ –Ω–µ –≥—Ä—É—Å—Ç–∏, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–º–µ—à–Ω–æ–π —Ç–µ—Å—Ç –æ —Ç–æ–º, –∫—Ç–æ —Ç—ã –æ–±—ã—á–Ω–æ –≤ –ø–æ—Ö–æ–¥–µ ü§†
–ê –º–æ–∂–µ—Ç, —Ç—ã —É–∂–µ –∏ —Ç–∞–∫ –∑–Ω–∞–µ—à—å? üßê
    ''', reply_markup=reply_markup)

    return FIRST


def continuation_handler(update: Update, _: CallbackContext):
    result = update.callback_query.data.split()[1]
    update.callback_query.answer()
    if result == "question":
        keyboard = [
            [
                InlineKeyboardButton("–ù–µ, —Ç–æ—Ä–æ–ø–ª—é—Å—å(", callback_data="answer random"),
                InlineKeyboardButton("–î–∞, –Ω–∞–π–¥–µ—Ç—Å—è)", callback_data="answer test"),
            ]
        ]
        message_content = "–ê –µ—Å—Ç—å –ø–∞—Ä–∞ –º–∏–Ω—É—Ç–æ–∫ –Ω–∞ –º–∞–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç? ü•∫"
    elif result == "exact":
        keyboard = [
            [
                InlineKeyboardButton("–°–ø–∞—Ç—å –ª—é–±–ª—é", callback_data="answer sleep"),
                InlineKeyboardButton("–•–æ—á—É –∫–æ—Å—Ç—ë—Ä!", callback_data="answer fire"),
            ],
            [
                InlineKeyboardButton("–î–∞–π—Ç–µ —Ñ–æ—Ç–∫–∏ —Å–¥–µ–ª–∞—é!", callback_data="answer photo"),
                InlineKeyboardButton("–ê–ª–æ, —á—Ç–æ –ø—Ä–∏–≤–µ–∑—Ç–∏?", callback_data="answer car"),
            ],
            [
                InlineKeyboardButton("–¢–∞–∫, –≥–¥–µ –º–æ–π –∫–æ—Ç—ë–ª?", callback_data="answer food"),
                InlineKeyboardButton("–©–∞ –≤ –ª–µ—Å —Å–±–µ–≥–∞—é", callback_data="answer forest"),
            ],
            [
                InlineKeyboardButton("–ü–æ–π–¥—É –ø–æ–∑–¥–æ—Ä–æ–≤–∞—é—Å—å", callback_data="answer friends"),
                InlineKeyboardButton("–ë–ª–∏–Ω, —á—Ç–æ-—Ç–æ –∂–∞—Ä–∫–æ", callback_data="answer clothes"),
            ],
            [
                InlineKeyboardButton("–¢–∞–∫, —â–∞—Å —Å–ø–æ—é", callback_data="answer guitar"),
                InlineKeyboardButton("–Ø –∑–∞ –±—Ä–µ–≤–Ω–∞–º–∏", callback_data="answer axe"),
            ]
        ]
        message_content = "–õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Ç–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É —Å–µ–±–µ –ø–æ –¥—É—à–µ üòá"
    else:
        raise ValueError(f"Unknown answer {result}!")

    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(update.callback_query.message.chat_id,
                     text=message_content, reply_markup=reply_markup)

    return SECOND


def result_handler(update: Update, _: CallbackContext):
    result = update.callback_query.data.split()[1]
    update.callback_query.answer()

    if result == "yes":
        keyboard = [
            [
                InlineKeyboardButton("–ê –∫—Ç–æ —è?", callback_data="answer question"),
                InlineKeyboardButton("–î–∞, —è –∑–Ω–∞—é –∫—Ç–æ —è üòé", callback_data="answer exact")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(update.callback_query.message.chat_id,
                         text='''–ö—Ä—É—Ç–æ, –¥–∞–≤–∞–π –ø–æ–≥–∞–¥–∞–µ–º –∫—Ç–æ —Ç—ã –≤ –ø–æ—Ö–æ–¥–µ –µ—â–µ —Ä–∞–∑–æ–∫ üî•
–ò—Ç–∞–∫, —Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ—é —Ä–æ–ª—å –≤ –ø–æ—Ö–æ–¥–µ? üßê''',
                         reply_markup=reply_markup)

        return FIRST
    elif result == "no":
        query = update.callback_query
        query.answer()
        bot.send_message(update.callback_query.message.chat_id,
                         text="""–ù—É –ª–∞–¥–Ω–æ üôÑ 
–î–æ –≤—Å—Ç—Ä–µ—á–∏ —Ç–æ–≥–¥–∞! –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! 
–†–∞—Å—Å–∫–∞–∂–∏ –æ–±–æ –º–Ω–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, –µ—Å–ª–∏ –Ω–µ—Å–ª–æ–∂–Ω–æ)
–ü—Å—Å, –∏ –µ—Å–ª–∏ —Å–æ—Å–∫—É—á–∏—à—å—Å—è, –Ω–∞–±–µ—Ä–∏ /start –∏–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å "–∫—Ç–æ —è", –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ :)""")
        return ConversationHandler.END


def feedback_handler(update: Update, _: CallbackContext):
    global your_destiny
    global shadow_message_bank, test_message_bank
    result = update.callback_query.data.split()[1]
    update.callback_query.answer()

    keyboard = [
        [
            InlineKeyboardButton("–î–∞, –¥–∞–≤–∞–π", callback_data="answer yes"),
            InlineKeyboardButton("–ù–µ, —Ö–≤–∞—Ç–∏—Ç –ø–æ–∂–∞–ª—É–π", callback_data="answer no"),
        ]
    ]

    if result in ("test", "yes", "no"):
        keyboard = [
            [
                InlineKeyboardButton("–°–∫–æ—Ä–µ–µ, –¥–∞", callback_data="answer yes"),
                InlineKeyboardButton("–î—É–º–∞—é, –Ω–µ—Ç", callback_data="answer no"),
            ]
        ]
        if result == "yes":
            your_destiny += '+'
        elif result == "no":
            your_destiny += '-'

        try:
            next_text = next(test_message_bank)
        except StopIteration:
            keyboard = [
                [
                    InlineKeyboardButton("–î–∞, –∏ –ø—Ä–∞–≤–¥–∞", callback_data=f"answer {calculate_result()}"),
                    InlineKeyboardButton("–ù–µ–µ, –¥–æ–ª–≥–æ –±—ã–ª–æ!! üëπ", callback_data=f"answer {calculate_result()}"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(update.callback_query.message.chat_id,
                             text="–í–æ—Ç –∏ –≤—Å—ë!) –ù–µ–¥–æ–ª–≥–æ, –≤–µ—Ä–Ω–æ?)", reply_markup=reply_markup)

            return SECOND

        print(f"Now {your_destiny}")

        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(update.callback_query.message.chat_id,
                         text=next_text, reply_markup=reply_markup)

        return SECOND

    elif result == "random" or result in results.keys():
        if result == "random":
            result = random.sample(results.keys(), 1)[0]
        bot.send_photo(update.callback_query.message.chat_id, photo=open(f"./results/{result}.jpg", 'rb'),
                       caption=f"–ü–æ—Ö–æ–∂–µ, —Ç—ã...\n{results[result]}\n\n–•–æ—á–µ—à—å –µ—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å, –∏–ª–∏ –Ω–µ? ü§î",
                       reply_markup=InlineKeyboardMarkup(keyboard))
        your_destiny = ""
        test_message_bank, shadow_message_bank = tee(shadow_message_bank)
    else:
        raise ValueError(f"Bad result! Maybe path traversal or something unknown!")

    return THIRD


def main() -> None:
    # Create the Updater and pass it your bot's token.
    updater = Updater(TELEGRAM_BOT_TOKEN)  # type: ignore

    dispatcher = updater.dispatcher  # type: ignore

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start_command_handler),
            MessageHandler(Filters.regex(re.compile(r'–∫—Ç–æ —è', re.IGNORECASE)), start_command_handler)
        ],
        states={
            FIRST: [
                CallbackQueryHandler(continuation_handler, pattern='^answer (.*)$')
            ],
            SECOND: [
                CallbackQueryHandler(feedback_handler, pattern='^answer (.*)$')
            ],
            THIRD: [
                CallbackQueryHandler(result_handler, pattern='^answer (.*)$')
            ]
        },
        fallbacks=[CommandHandler('start', start_command_handler)],
    )
    dispatcher.add_handler(conv_handler)

    # dispatcher.add_handler(CommandHandler('start', start_command_handler))
    # dispatcher.add_handler(CommandHandler('gettasklist', tasklist_command))
    # dispatcher.add_handler(InlineQueryHandler(inline_query_handler))
    # dispatcher.add_handler(CallbackQueryHandler(button_handler))
    # dispatcher.add_handler(
    #     MessageHandler(Filters.text & ~Filters.command, text_handler)  # type: ignore
    # )

    # Start the Bot
    updater.start_polling()

    # Run the bot until the user presses Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT
    updater.idle()


if __name__ == '__main__':
    main()
